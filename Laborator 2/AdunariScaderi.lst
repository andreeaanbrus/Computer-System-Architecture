     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01                          a db 1
    14 00000001 02                          b db 2
    15 00000002 03                          c db 3
    16 00000003 04                          d db 4
    17                                  
    18                                  ; our code starts here
    19                                  ; (c + d) - (a + d) + b
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 66A1[02000000]                  mov Ax, [c] ; AX = 3
    23 00000006 660305[03000000]                add AX, [d] ; AX = c + d = 3 + 4 = 7
    24 0000000D 668B1D[00000000]                mov BX, [a] ; BX = 1 
    25 00000014 66031D[03000000]                add BX, [d] ; BX = a + d = 5
    26 0000001B 6629D8                          sub AX, BX  ; AX = AX - BX = 7 - 5 = 2
    27 0000001E 660305[01000000]                add AX, [b] ; AX = AX + b = 2 + 2 = 4
    28                                         ; exit(0)
    29 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    30 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
