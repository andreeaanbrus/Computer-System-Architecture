     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2
    14 00000001 02                          b db 2
    15 00000002 0300                        d dw 3
    16                                  
    17                                  ; [-1+d-2*(b+1)]/a
    18                                  ;a,b,c - byte, d - word
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 A0[01000000]                    mov AL, [b] ; AL = 2 = 02(h)
    22 00000005 0401                            add AL, 1   ; AL = 2 + 1 = 3 = 03(h)
    23 00000007 B402                            mov AH, 2   ; AH = 2 = 02(h)
    24 00000009 F6E4                            mul AH      ; AX = AL * AH = 3 * 2 = 6 = 06(h)
    25 0000000B 668B1D[02000000]                mov BX, [d]      ; BX = 3 = 03(h)
    26 00000012 66F7D8                          neg AX      ; AX = -AX = -6 = FFFA
    27 00000015 6601D8                          add AX, BX  ; AX = AX + BX = -6 + 3 = -3 = FFFD
    28 00000018 6683C0FF                        add AX, -1  ; AX = AX - 1 = -3 - 1 = -4 = FFFC
    29 0000001C 8A0D[00000000]                  mov CL, [a] ; CL = 1
    30 00000022 F6F9                            idiv CL      ; AL = AX/CL, AH = AX % CL ; AL = FE, AH = 00 
    31                                          ; exit(0)
    32 00000024 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    33 00000026 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
