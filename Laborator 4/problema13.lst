     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 B2                          a db 10110010b
    14 00000001 B1                          b db 10110001b
    15 00000002 93                          c db 10010011b
    16 00000003 4A                          d db 01001010b
    17                                  
    18                                  ; Dandu-se 4 octeti, sa se obtina in AX suma numerelor intregi reprezentate de bitii 4-6 ai celor 4 octeti.
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; AL := the bits 4-6 of a (to the right side)
    22 00000000 A0[00000000]                    mov AL, [a]         ; AL := 1011 0010 = B2
    23 00000005 D0E8                            shr AL, 1           ; AL := 0101 1001 = 59
    24 00000007 2407                            and AL, 00000111b   ; AL := 0000 0001 = 01
    25                                          
    26                                          ; BL := the bits 4-6 of b (to the right side)
    27 00000009 8A1D[01000000]                  mov BL, [b]         ;BL := 1011 0001 = B1h
    28 0000000F D0EB                            shr BL, 1           ;BL := 0101 1000 = 58h
    29 00000011 80E307                          and BL, 00000111b   ;BL := 0000 0000 = 0h
    30                                          
    31                                          ; CL := the bits 4-6 of c (to the right side)
    32 00000014 8A0D[02000000]                  mov CL, [c]         ;CL := 1001 0011 = 93h
    33 0000001A D0E9                            shr CL, 1           ;CL := 0100 1001 = 49h
    34 0000001C 80E107                          and CL, 00000111b   ;CL := 0000 0001 = 01h
    35                                          
    36                                          ; DL := the bits 4-6 of d (to the right side)
    37 0000001F 8A15[03000000]                  mov DL, [d]         ;DL := 0100 1010 = 4A
    38 00000025 D0EA                            shr DL, 1           ;DL := 0010 0101 = 25h
    39 00000027 80E207                          and DL, 00000111b   ;DL := 0000 0101 = 05h
    40                                          
    41 0000002A B400                            mov AH, 0
    42                                          
    43                                          ;make the addition -> max number = 28
    44 0000002C 00D8                            add AL, BL
    45 0000002E 00C8                            add AL, CL
    46 00000030 00D0                            add AL, DL
    47                                          ; result is in AL
    48                                          ; exit(0)
    49 00000032 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000034 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
