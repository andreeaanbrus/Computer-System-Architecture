     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 3BB3                        a dw 1011001100111011b
    14 00000002 8AE5                        b dw 1110010110001010b
    15 00000004 00000000                    c dd 0
    16                                      
    17                                  ; Se dau cuvintele A si B. Sa se obtina dublucuvantul C:
    18                                  ;bitii 0-2 ai lui C coincid cu bitii 12-14 ai lui A
    19                                  ;bitii 3-8 ai lui C coincid cu bitii 0-5 ai lui B
    20                                  ;bitii 9-15 ai lui C coincid cu bitii 3-9 ai lui A
    21                                  ;bitii 16-31 ai lui C coincid cu bitii lui A
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ;the bits 0-2 of C should be the bits 12-14 of A
    25 00000000 66A1[00000000]                  mov AX, [a] ; AX:= 1011 0011 0011 1011b (B33Bh)
    26 00000006 66C1E00C                        shl AX, 12  ; AX = 1011 0000 0000 0000b (B000h)
    27 0000000A 662500E0                        and AX, 1110000000000000b ; AX := 1010 0000 0000 0000b 
    28                                          ;convert the word in AX into double word in EAX
    29 0000000E 66BA0000                        mov DX, 0
    30 00000012 6650                            push AX
    31 00000014 6652                            push DX
    32 00000016 58                              pop EAX ; EAX := 1010 0000 0000 0000 0000 0000 0000 0000b (A0000000h)
    33 00000017 B900000000                      mov ECX , 0
    34 0000001C 09C1                            or ECX, EAX ; BCX := EAX = 1010 0000 0000 0000 0000 0000 0000 0000b (A0000000h)
    35                                          
    36                                          ;the bits 3-8 of C should be the bits 0-5 of B
    37 0000001E 66A1[02000000]                  mov AX, [b] ; AX := 1110 0101 1000 1010b = E68Ah
    38 00000024 66C1E803                        shr AX, 3   ; AX := 0001 1100 1011 0001b = 1CB1h
    39 00000028 6625801F                        and AX, 0001111110000000b ; AX := 0001 1100 1000 0000b = 1C80
    40                                          ; convert the word AX into dword EAX
    41 0000002C 66BA0000                        mov DX, 0   ; DX := 0
    42 00000030 6650                            push AX
    43 00000032 6652                            push DX
    44 00000034 58                              pop EAX     ;EAX := 0001 1100 1000 0000 0000 0000 0000 0000
    45 00000035 09C1                            or ECX, EAX ;BCX := 1011 1100 1000 0000 0000 0000 0000 0000 = BC800000h
    46                                          
    47                                          ; the bits 9-15 of c should be the bits 3-9 of a
    48 00000037 66A1[00000000]                  mov AX, [a] ; AX := 1011 0011 0011 1011 = B33Bh
    49 0000003D 66C1E806                        shr AX, 6   ; AX := 0000 0010 1100 1100 = 02CCh
    50 00000041 6683E07F                        and AX, 000000001111111b ; AX := 0000 0000 0100 1100 = 004Ch
    51                                          ;convert the word Ax into dword EAX
    52 00000045 66BA0000                        mov DX, 0   ; DX := 0
    53 00000049 6650                            push AX
    54 0000004B 6652                            push DX
    55 0000004D 58                              pop EAX     ;EAX := 0000 0000 0100 1100 0000 0000 0000 0000
    56 0000004E 09C1                            or ECX, EAX ;ECX := 1011 1100 1100 1100 0000 0000 0000 0000 = BCCC0000h
    57                                          
    58                                          ;bits 16-31 of C should be all bits of ai
    59 00000050 31C0                            xor EAX, EAX; EAX:= 0
    60 00000052 66A1[00000000]                  mov AX, [a] ; AX := 1011 0011 0011 1011 = B33Bh
    61 00000058 09C1                            or ECX, EAX ; ECX := 1011 1100 1100 1100 1011 0011 0011 1011 BCCCB33B
    62 0000005A 890D[04000000]                  mov [c], ECX; c := ECX 
    63                                          
    64 00000060 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000062 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
