     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2
    14 00000001 FDFF                        b dw -3
    15 00000003 04000000                    c dd 4
    16 00000007 0500000000000000            d dq 5
    17                                  
    18                                  ; our code starts here
    19                                  ;(c+d)-(a+d)+b
    20                                  ;a - byte, b - word, c - double word, d - qword
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ;(c+d)
    24 00000000 8B0D[07000000]                  mov ECX, DWORD[d]  
    25 00000006 8B15[0B000000]                  mov EDX, DWORD[d+4] ;EBX:EDX - qword d, 5
    26 0000000C 030D[03000000]                  add ECX, DWORD[c]   ;ECX := EBX + c, 9
    27 00000012 83D200                          adc EDX, 0          ;in caz de carry, se aduna la EDX
    28                                          ;a+d
    29 00000015 8B35[07000000]                  mov ESI, DWORD[d]
    30 0000001B 8B3D[0B000000]                  mov EDI, DWORD[d+4]; ESI:EDI - qword data, 5
    31 00000021 A0[00000000]                    mov AL, byte[a]    ; EBX -> 2
    32 00000026 6698                            cbw                ; converting byte a to word
    33 00000028 98                              cwde               ; converting the word a to double word in EAX
    34 00000029 01C6                            add ESI, EAX       ; ESI := ESI + EAX
    35 0000002B 83D700                          adc EDI, 0         ; in caz de carry, se aduna la EDI
    36                                                             ;ESI:EDI := 2
    37                                          ;(c+d) - (a+d)                   
    38 0000002E 29F1                            sub ECX, ESI       ; ECX := ECX - ESI
    39 00000030 83DA00                          sbb EDX, 0         ; daca exista imprumut, se scade din EDX
    40 00000033 29FA                            sub EDX, EDI       ; EDX := EDX - EDI
    41                                                             ; EDX:ECX := (c+d) - (a+d)
    42                                          ;(c+d)-(a+d) + b
    43 00000035 66A1[01000000]                  mov AX, word [b]
    44 0000003B 98                              cwde
    45 0000003C 01C1                            add ECX, EAX
    46 0000003E 83D200                          adc EDX, 0
    47                                          ; exit(0)
    48 00000041 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000043 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
