     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2
    14 00000001 01                          b db 1
    15 00000002 04000000                    c dd 4
    16 00000006 02                          d db 2
    17 00000007 0500000000000000            x dq 5
    18                                  ;(8-a*b*100+c)/d+x
    19                                  ;a,b,d-byte; c-doubleword; x-qword
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A0[00000000]                    mov AL, [a] ;AL:= [a] = 2
    24 00000005 8A1D[01000000]                  mov BL, [b] ; BL:=[b] = 1
    25 0000000B F6EB                            imul BL      ;AX := AL * BL = 2*1 = 2
    26 0000000D 66BB6400                        mov BX, 100 ; BX -> 64(h)
    27 00000011 66F7EB                          imul BX      ; DX:AX = AX* 100= 200 = C8
    28 00000014 8B1D[02000000]                  mov EBX, [c]; EBX -> c
    29 0000001A 83C308                          add EBX, 8  ; c+8
    30 0000001D C1E010                          shl EAX, 16
    31 00000020 6689C2                          mov DX, AX
    32 00000023 C1C010                          rol EAX, 16 ;EAX :AX:DX
    33 00000026 29C3                            sub EBX, EAX
    34 00000028 89D8                            mov EAX, EBX
    35                                          
    36 0000002A C1C010                          rol EAX, 16
    37 0000002D 6689C2                          mov DX, AX
    38 00000030 C1E810                          shr EAX, 16
    39                                          ; EAX -> DX:AX
    40                                          
    41 00000033 8A1D[06000000]                  mov BL, [d]   ; BL := d = 2
    42 00000039 660FBEDB                        movsx BX, BL ; conversie cu semn byte -> word
    43 0000003D 66F7FB                          idiv BX      ;DX:AX -> EAX:BX -> A/2 = 5
    44                                          
    45 00000040 660305[07000000]                add AX, [x] ; AX := AX + 5 -> AX = 10(d) = A(h)
    46 00000047 98                              cwde
    47                                          ; exit(0)
    48 00000048 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 0000004A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
