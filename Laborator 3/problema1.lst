     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 02                          a db 2
    14 00000001 0300                        b dw 3
    15 00000003 04000000                    c dd 4
    16 00000007 0500000000000000            d dq 5
    17                                  
    18                                  ; our code starts here
    19                                  ;(c+d)-(a+d)+b
    20                                  ;a - byte, b - word, c - double word, d - qword
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 A1[07000000]                    mov EAX, DWORD[d]  
    24 00000005 8B15[0B000000]                  mov EDX, DWORD[d+4] ;EAX:EDX - qword d, 5
    25 0000000B 0305[03000000]                  add EAX, DWORD[c] ; EAX := EAX + c, 9
    26 00000011 83D200                          adc EDX, 0        ; in caz de carry, se aduna la EDX
    27                                          
    28 00000014 8B35[07000000]                  mov ESI, DWORD[d]
    29 0000001A 8B3D[0B000000]                  mov EDI, DWORD[d+4]; ESI:EDI - qword data, 5
    30 00000020 31DB                            xor EBX, EBX       ; EBX -> 0
    31 00000022 8A1D[00000000]                  mov BL, byte[a]    ; EBX -> 2
    32 00000028 01DE                            add ESI, EBX       ; ESI := ESI + EBI
    33 0000002A 83D700                          adc EDI, 0         ; in caz de carry, se aduna la EDI
    34                                                             ;ESI:EDI := 2
    35 0000002D 29F0                            sub EAX, ESI       ; EAX := EAX - ESI
    36 0000002F 83DA00                          sbb EDX, 0         ; daca exista imprumut, se scade din EDX
    37 00000032 29FA                            sub EDX, EDI       ; EDX := EDX - EDI
    38                                                             ; EDX:EAX := (c+d) - (a+d)
    39                                                             
    40 00000034 31DB                            xor EBX, EBX       ; EBX -> 0
    41 00000036 668B1D[01000000]                mov BX, WORD[b]    ; BX -> b (EBX -> b)
    42 0000003D 01D8                            add EAX, EBX       ; EAX := EAX + EBX
    43 0000003F 83D200                          adc EDX, 0         ; daca exista carry, se aduna la EDX
    44                                          ; exit(0)
    45 00000042 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000044 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
